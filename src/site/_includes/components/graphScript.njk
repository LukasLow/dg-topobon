<script>
    const getCssVar = (variable) => getComputedStyle(document.body).getPropertyValue(variable);

    function htmlDecode(input) {
        var doc = new DOMParser().parseFromString(input, "text/html");
        return doc.documentElement.textContent;
    }
    window.graphData = null;
    window.maxGraphDepth = 1;

    function getNeighbours(data, node, max_depth, depth) {
        if (depth >= max_depth) {
            return new Set([node]);
        } else {
            let neighbors = [];
            let newDepth = depth + 1;
            node.outBound.forEach((n) => {
                const children = getNeighbours(data, data.nodes[n], max_depth, newDepth);
                neighbors.push(...children);
            });
            return new Set([node, ...neighbors]);
        }
    }

    function filterToDepth(data) {
        let currentLink = window.location.pathname;
        let currentNode = data.nodes[currentLink] || Object.values(data.nodes).find((v) => v.home);

        let nodes = getNeighbours(data, currentNode, window.maxGraphDepth, 0);
        nodes = Array.from(nodes);
        if (!currentNode.home) {
            nodes = nodes.filter(n => !n.home);
        }
        let ids = nodes.map((n) => n.id);
        let graphData = {
            nodes,
            links: [...data.links.filter((con) => ids.indexOf(con.target) > -1 && ids.indexOf(con.source) > -1)],
        }
        return graphData;
    }

    var Graph;

    function renderGraph(graphData, id, width, height) {
        let Graph = ForceGraph()
        (document.getElementById(id))
            .graphData(graphData)
            .nodeId('id')
            .nodeLabel('title')
            .linkSource('source')
            .nodeCanvasObject((node, ctx) => {
                const numberOfLinks = (node.outBound && node.outBound.length) || 2;
                    const numberOfNeighbours = (node.neighbors && node.neighbors.length) || 2;
                    const nodeR = Math.min(7, Math.max((numberOfLinks + numberOfNeighbours) / 2, 2));
                    ctx.beginPath();
                    ctx.arc(node.x, node.y, nodeR, 0, 2 * Math.PI, false);
                    ctx.fillStyle = getCssVar("--text-accent");
                    ctx.fill();

                    const label = htmlDecode(node.title)
                    const fontSize = 3.5;
                    ctx.font = `${fontSize}px Sans-Serif`;

                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'top';
                    ctx.fillText(label, node.x, node.y + nodeR + 2);
                })
                
            .linkColor(() => getCssVar("--text-muted") || getCssVar("--text-normal"))
            .onNodeClick(node => {
                    window.location = node.url;
                })
            .linkTarget('target').width(width).height(height);
        return Graph;
    }

    function fetchGraphData() {
        fetch('/graph').then(res => res.json()).then(data => {
            window.graphData = data;
            Graph = renderGraph(filterToDepth(JSON.parse(JSON.stringify(data))), "link-graph", 330, 330);
        });
    }

    fetchGraphData();
    window.document.getElementById('graph-depth').value = window.maxGraphDepth;
    window.document.getElementById('depth-display').innerText = window.maxGraphDepth;
    window.document.getElementById('graph-depth').addEventListener('input', (evt) => {
        
        window.maxGraphDepth = evt.target.value;
        window.document.getElementById('depth-display').innerText = window.maxGraphDepth;
        if (Graph != null) {
            Graph._destructor();
            Graph = null;
        }
        renderGraph(filterToDepth(JSON.parse(JSON.stringify(window.graphData))), "link-graph", 330, 330);
    })

    window.fullGraph = null;
    function renderFullGraph() {
        if (!window.fullGraph) {
            const graphData = {
                links: [...window.graphData.links],
                nodes: [...Object.values(window.graphData.nodes)]
            }
            
            let g = document.createElement('div');
            g.id = 'full-graph';
            g.classList.add('show');
            document.body.appendChild(g);
            g.innerHTML = '<i class="fa fa-times" id="full-graph-close" aria-hidden="true"></i><div id="full-graph-container"></div>';
            
            window.fullGraph = renderGraph(graphData, "full-graph-container", g.offsetWidth, g.offsetHeight);
            document.getElementById('full-graph-close').addEventListener('click', (evt) => {
                g.classList.remove('show');
                window.fullGraph._destructor();
                window.fullGraph = null;
                document.getElementById('full-graph').remove()
            });
        }
        
    }

    document.getElementById('graph-full-btn').addEventListener('click', (evt) => {
        if (!fullGraph) {
            renderFullGraph();
        }
    });
</script>